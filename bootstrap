#!/usr/bin/env bash

set -e

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2
  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'
  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H ~/.dotfiles -maxdepth 1 -type f -name '.*'); do
    dst="$HOME/$(basename $src)"
    link_file "$src" "$dst"
  done

  dotdirs=(.config .oh-my-zsh .homebrew)

  for dotdir in "${dotdirs[@]}"; do
    fulldotdir=~/.dotfiles/$dotdir

    for src in $(find -H $fulldotdir -maxdepth 5 -type f -name '*.*' -o -name 'Brewfile'); do
      dst="$HOME/$dotdir${src/$fulldotdir/}"
      mkdir -p "$(dirname "$dst")"
      link_file "$src" "$dst"
    done
  done
}

install_homebrew() {
  info "Installing homebrew..."

  if ! command -v brew &> /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  else
    info "Homebrew already installed!"
  fi
}

setup_homebrew() {
  user "Please sign in to the Mac App Store before continuing... (press enter when done)"
  read
  brew bundle --file=~/.homebrew/Brewfile
  success "Bundled homebrew"
}

install_ohmyzsh() {
  info "Installing oh-my-zsh..."

  if [ ! -d ~/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    success "Installed oh-my-zsh"
  else
    info "oh-my-zsh already installed"
  fi
}

setup_nvim () {
  info "Installing neovim..."
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  pip3 install --user neovim
  success "Installed neovim"
}

load_macos_defaults() {
  info "Loading macOS defaults..."
  sh ~/.macos
  success "Loaded macOS defaults"
}

setup_sublime() {
  info "Symlinking Sublime Text to Google Drive..."
  subl
  sleep 5
  cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/
  rm -r User
  ln -s ~/Google\ Drive/Misc/Sublime\ Text\ 3/User
  success "Symlinked Sublime Text to Google Drive"
}

generate_keys() {
  info "Generating SSH key pair..."
  ssh-keygen -t rsa
  success "Created ssh key pair"
  success "Don't forget to add the key pair to GitHub!"
}

create_work_directories() {
  info "Creating common work directories..."
  mkdir ~/Projects
  success "Created ~/Projects"
  mkdir ~/VMs
  success "Created ~/VMs"
}

prompt_for_reboot() {
  success "All done! You should probably reboot now..."
  user "Would you like to reboot now? [y/n]"
  read -s -n 1 answer

  if [ "$answer" == "y" ]; then
    sudo shutdown -r now
  fi
}

install_ohmyzsh
install_dotfiles
install_homebrew
setup_homebrew
setup_nvim
load_macos_defaults
setup_sublime
generate_keys
create_work_directories
prompt_for_reboot
